@inject SignInManager<ApplicationUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}

<ul class="nav flex-column">
    <li class="nav-item">
        <a class="nav-link custom-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">Profile</a>
    </li>
    <li class="nav-item"><a class="nav-link custom-link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">Email</a></li>
    <li class="nav-item"><a class="nav-link custom-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link custom-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Personal data</a></li>

    @if (User.IsInRole("Admin"))
	{
        <li class="nav-item"><a class="nav-link custom-link" asp-controller="Products" asp-action="ValidateProducts">Validate products</a></li>
        <li class="nav-item"><a class="nav-link custom-link" asp-controller="Users" asp-action="Index">View Users</a></li>
        <li class="nav-item"><a class="nav-link custom-link" asp-controller="Categories" asp-action="Index">View Categories</a></li>
        <li class="nav-item"><a class="nav-link custom-link" asp-controller="Products" asp-action="Index">View Products</a></li>
	}

   

    <li class="nav-item">
		<form class="nav-link " asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
			<button type="submit" class="btn btn-link custom-link">Logout</button>
		</form>
    </li>
    
</ul>
